import {ethers} from "hardhat";
import {deployed} from "../hardhat.config";
import {JsonRpcProvider as JsonRpcProviderV6, Contract as ContractV6, Wallet as WalletV6, BrowserProvider, Signer as SignerV6} from 'ethers-v6';

const {RelayProvider} = require('@opengsn/provider')

const main = async () => {
    const [deployer] = await ethers.getSigners();

    // As generated by `npx ganache-cli --wallet.deterministic`
    const GANACHE_PK = "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d";

    const chainId = (await ethers.provider.getNetwork()).chainId;

    if (chainId !== 1337) {
        throw new Error("This script should only be used on ganache!");
    }

    const contractAddress = deployed.ganache.CaptureThatFlag;
    const contractABI = require('../artifacts/contracts/CaptureThatFlag.sol/CaptureThatFlag.json').abi;

    const path = "../../opengsn-local/build/gsn/";
    const paymasterAddress = require(path + 'Paymaster.json').address;
    const forwarderAddress = require(path + 'Forwarder.json').address;

    // Set trusted forwarder
    const contract0 = new ethers.Contract(contractAddress, contractABI, deployer);
    const tx = await contract0.setTrustedForwarder(forwarderAddress);
    await tx.wait();

    const config = {
        paymasterAddress,
        performDryRunViewRelayCall: true,
        loggerConfiguration: {logLevel: 'error'},
    };

    const rpcURL = 'http://localhost:8546';  // (!)

    const ethersV6Provider = new JsonRpcProviderV6(rpcURL);
    const walletV6 = new WalletV6(GANACHE_PK, ethersV6Provider);
    const {gsnProvider, gsnSigner} = await RelayProvider.newEthersV6Provider({provider: walletV6, config});

    const contract = new ContractV6(contractAddress, contractABI, gsnSigner);

    console.info("CAPTURED BY (0):", await contract.capturedBy());

    const result = await contract.reset();
    await result.wait();

    console.info("CAPTURED BY (1):", await contract.capturedBy());

    // get balance of gsnSigner
    const balanceBeforeCapture = await ethersV6Provider.getBalance(await gsnSigner.getAddress());

    const tx2 = await contract.captureTheFlag();
    await tx2.wait();

    const balanceAfterCapture = await ethersV6Provider.getBalance(await gsnSigner.getAddress());

    console.info("CAPTURED BY (2):", await contract.capturedBy());
    console.info("Balance before capture:", balanceBeforeCapture);
    console.info("Balance after capture: ", balanceAfterCapture);

    // Create a wallet with zero balance
    let newWallet = new WalletV6(WalletV6.createRandom().privateKey, gsnProvider);
    const {gsnSigner: newGsnSigner} = await RelayProvider.newEthersV6Provider({provider: newWallet, config});

    // get the balance of wallet using ethersV5Provider
    console.info("Balance of newWallet before capture:", await ethersV6Provider.getBalance(await newWallet.getAddress()));

    const tx3 = await (contract.connect(newGsnSigner) as ContractV6).captureTheFlag();
    await tx3.wait();

    console.info("Balance of newWallet after capture: ", await ethersV6Provider.getBalance(await newWallet.getAddress()));

    console.info("CAPTURED BY (3):", await contract.capturedBy());
};

main().catch(console.error);
