// import {ethers} from 'ethers';
import {FunctionABI} from "../../../components/types";
import {prepareVariables} from "../../../components/utils";
import {
    JsonRpcProvider as JsonRpcProviderV6,
    Contract as ContractV6,
    Wallet as WalletV6,
    BrowserProvider,
    Signer as SignerV6, Transaction
} from 'ethers';
import {readJsonFile} from "nx/src/utils/fileutils";
import {RelayProvider} from "@opengsn/provider";


const buildTransaction = async (contractNetwork: string, contractAddress: string, fromAddress: string, functionABI: FunctionABI, functionArgs: Array<any>) => {
    // Development on Ganache only
    if (contractNetwork !== '0x539') {
        throw new Error(`Contract network ${contractNetwork} is not supported.`);
    }

    const ganacheProviderUrl = 'http://localhost:8545';

    // As generated by `npx ganache-cli --wallet.deterministic`
    const GANACHE_PK = "0x4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d";

    // const paymasterAddress = readJsonFile("../../../../on-chain/artifacts/contracts/Paymaster.sol/Paymaster.json").address;

    const ethersV6Provider = new JsonRpcProviderV6(ganacheProviderUrl);
    const walletV6 = new WalletV6(GANACHE_PK, ethersV6Provider);

    const tx = {
        to: contractAddress,
        from: fromAddress,
    };

    const functionName = functionABI.name;

    console.debug(`Populating ${JSON.stringify(functionABI.inputs)} with ${JSON.stringify(functionArgs)}`);
    console.debug(`Calling ${functionName} with args ${JSON.stringify(functionArgs)}`);


};


async function handlePostRequest(request: Request) {
    const data = await request.json();

    const contractNetwork = data.contractNetwork;
    const contractAddress = data.contractAddress;
    const fromAddress = data.fromAddress;
    const functionABI: FunctionABI = data.functionABI;
    const gasless: boolean = data.gasless || false;

    if (!gasless) {
        throw new Error(`Gasless transaction request expected.`);
    }

    const functionArgs = prepareVariables(functionABI, data.variables);

    await buildTransaction(contractNetwork, contractAddress, fromAddress, functionABI, functionArgs);
}

export async function POST(request: Request) {
    const jsonResult =
        await handlePostRequest(request).then(
            x => {
                return {ok: true, message: x};
            }
        ).catch(
            error => {
                console.error(`Error while handling POST request:`);
                console.error(" - Request - ", request);
                console.error(" - Error   - ", error);

                return {ok: false, message: `${error}`};
            }
        );

    return new Response(JSON.stringify(jsonResult), {headers: {"content-type": "application/json"}});
}
